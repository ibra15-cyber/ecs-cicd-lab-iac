AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Fargate Service Stack with CodeDeploy Blue-Green Deployment - triggered'

Parameters:
  AppName:
    Type: String
    Default: 'java-full-stack'
  DeploymentTimestamp:
    Type: String
    Default: "default"
    Description: 'Timestamp to force changeset creation'

Resources:
  # ECS TASK DEFINITION - blublueprint for how to run your applicatione 
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-Task
      NetworkMode: awsvpc  #AWS VPC networking mode, which gives each task its own IP address
      RequiresCompatibilities: [FARGATE]
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !ImportValue 'java-full-stack-ECSTaskExecutionRoleArn' #allows ECS to pull the image and write logs
      TaskRoleArn: !ImportValue 'java-full-stack-ECSTaskRoleArn' #the task role is for the application itself.
      ContainerDefinitions:
        - Name: !Sub ${AppName}-Container
          Image: !Sub
            - "${ECRRepoURI}:latest"
            - ECRRepoURI: !ImportValue 'java-full-stack-ECRRepositoryURI'
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          HealthCheck:
            Command: [ "CMD-SHELL", "curl -f http://localhost:8080/ || exit 1" ]
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue 'java-full-stack-CloudWatchLogGroupName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs

  # --- GREEN TARGET GROUP FOR BLUE-GREEN DEPLOYMENT/ stagging  ---
  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-Green-TG
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue 'java-full-stack-VPCId'
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'

  # --- TEST LISTENER FOR BLUE-GREEN DEPLOYMENT ---
  TestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !ImportValue 'java-full-stack-ALBArn'
      Port: 9000 #provides a way to send traffic directly to the new version (e.g., for integration tests) without affecting the live production traffic on port 80.
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GreenTargetGroup

  # --- ECS SERVICE (with Load Balancer configuration) ---
  ECSService: # This is the resource that actually runs and maintains the application application.
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AppName}-Service
      Cluster: !ImportValue 'java-full-stack-ECSClusterName'
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY #tells ECS to hand over control of deployments to AWS CodeDeploy
      LoadBalancers:
        - TargetGroupArn: !ImportValue 'java-full-stack-ALBTargetGroupArn'
          ContainerName: !Sub ${AppName}-Container
          ContainerPort: 8080
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !ImportValue 'java-full-stack-PrivateSubnet1Id'
            - !ImportValue 'java-full-stack-PrivateSubnet2Id'
          SecurityGroups:
            - !ImportValue 'java-full-stack-ECSSecurityGroupId'

  # --- APPLICATION AUTO SCALING ---
  # This resource defines what ECS Service to scale and the bounds within which it can scale.
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub 
        - service/${ClusterName}/${ServiceName} # get the cluster and service name to make intrinsic functions to construct the unique identifier for your ECS service
        - ClusterName: !ImportValue 'java-full-stack-ECSClusterName'
          ServiceName: !GetAtt ECSService.Name
      ScalableDimension: ecs:service:DesiredCount #scale the number of tasks that the ECS service maintains
      ServiceNamespace: ecs #the resource to scale is an ECS service.

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AppName}-cpu-scaling-policy
      PolicyType: TargetTrackingScaling #keeps a specific CloudWatch metric close to your target value.
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0 #consistent cpu usage above 70% scale out and vice versa
        ScaleInCooldown: 300 # safety mechanisms to prevent rapid, flapping scaling actions. wait 5 minutes before considering scaling out again
        ScaleOutCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization #the metric that the policy tracks.

  # --- CODE DEPLOY APPLICATION ---
  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${AppName}-CodeDeploy-App
      ComputePlatform: ECS

  # --- CODE DEPLOY DEPLOYMENT GROUP ---
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: ECSService
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: !Sub ${AppName}-CodeDeploy-DG
      ServiceRoleArn: !ImportValue 'java-full-stack-CodeDeployServiceRoleArn'
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce #switch all traffic from blue to green at once
      DeploymentStyle:
        DeploymentType: BLUE_GREEN # Specifies that this is a blue-green deployment
        DeploymentOption: WITH_TRAFFIC_CONTROL # CodeDeploy should manage the traffic routing
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5 # Tells CodeDeploy to terminate the old ("blue") tasks 5 minutes after the deployment succeeds.
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT #Tells CodeDeploy to proceed with the traffic shift automatically after a health check.
      AutoRollbackConfiguration: # Automatically rolls back to the blue version if the deployment fails or an alarm triggers.
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM 
      ECSServices:
        - ServiceName: !GetAtt ECSService.Name
          ClusterName: !ImportValue 'java-full-stack-ECSClusterName'
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !ImportValue 'java-full-stack-ALBTargetGroupName'
              - Name: !GetAtt GreenTargetGroup.TargetGroupName
            ProdTrafficRoute:
              ListenerArns: 
                - !ImportValue 'java-full-stack-ALBListenerArn'
            TestTrafficRoute:
              ListenerArns: 
                - !Ref TestListener

Outputs:
  ServiceURL:
    Description: 'URL to access the application'
    Value: !Sub 
      - "http://${ALBDNSName}"
      - ALBDNSName: !ImportValue 'java-full-stack-ALBDNSName'
  
  ECSServiceName:
    Description: 'ECS Service Name'
    Value: !Ref ECSService

  CodeDeployAppName:
    Description: 'CodeDeploy Application Name'
    Value: !Ref CodeDeployApp
    Export:
      Name: !Sub ${AppName}-CodeDeployAppName

  CodeDeployDeploymentGroupName:
    Description: 'CodeDeploy Deployment Group Name'
    Value: !Ref CodeDeployDeploymentGroup
    Export:
      Name: !Sub ${AppName}-CodeDeployDeploymentGroupName

  TestListenerArn:
    Description: 'Test Listener ARN for Blue-Green Deployment'
    Value: !Ref TestListener

  GreenTargetGroupName:
    Description: 'Green Target Group Name'
    Value: !GetAtt GreenTargetGroup.TargetGroupName
    Export:
      Name: !Sub ${AppName}-GreenTargetGroupName

  ScalableTargetId:
    Description: 'Application Auto Scaling Target ID'
    Value: !Ref ScalableTarget

  DeploymentTimestamp:
    Description: 'Timestamp of last deployment'
    Value: !Ref DeploymentTimestamp