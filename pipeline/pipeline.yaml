AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodePipeline for ECS Blue-Green Deployment with CodeBuild'

Parameters:
  AppName:
    Type: String
    Default: 'java-full-stack'
  DeploymentTimestamp:
    Type: String
    Default: "default"

Resources:
  # CodeBuild Project to create deployment artifacts
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AppName}-DeploymentArtifacts
      ServiceRole: !Ref CodeBuildServiceRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !ImportValue 'java-full-stack-ECRRepositoryURI'
          - Name: TASK_EXECUTION_ROLE_ARN
            Value: !ImportValue 'java-full-stack-ECSTaskExecutionRoleArn'
          - Name: TASK_ROLE_ARN
            Value: !ImportValue 'java-full-stack-ECSTaskRoleArn'
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI
                - echo Getting latest image URI...
                - IMAGE_URI=$ECR_REPOSITORY_URI:latest
                - echo "Image URI will be:" $IMAGE_URI
            build:
              commands:
                - echo Build started on `date`
                - echo Creating appspec.yml...
                - printf 'version: 0.0\nResources:\n  - TargetService:\n      Type: AWS::ECS::Service\n      Properties:\n        TaskDefinition: <TASK_DEFINITION>\n        LoadBalancerInfo:\n          ContainerName: "java-full-stack-Container"\n          ContainerPort: 8080\n' > appspec.yml
                - echo Creating taskdef.json...
                - printf '{\n  "family": "java-full-stack-Task",\n  "networkMode": "awsvpc",\n  "requiresCompatibilities": ["FARGATE"],\n  "cpu": "256",\n  "memory": "512",\n  "executionRoleArn": "%s",\n  "taskRoleArn": "%s",\n  "containerDefinitions": [\n    {\n      "name": "java-full-stack-Container",\n      "image": "<IMAGE1_NAME>",\n      "essential": true,\n      "portMappings": [\n        {\n          "containerPort": 8080,\n          "protocol": "tcp"\n        }\n      ],\n      "logConfiguration": {\n        "logDriver": "awslogs",\n        "options": {\n          "awslogs-group": "/ecs/java-full-stack",\n          "awslogs-region": "%s",\n          "awslogs-stream-prefix": "ecs"\n        }\n      }\n    }\n  ]\n}\n' "$TASK_EXECUTION_ROLE_ARN" "$TASK_ROLE_ARN" "$AWS_DEFAULT_REGION" > taskdef.json
                - echo "Validating generated files..."
                - echo "AppSpec content:"
                - cat appspec.yml
                - echo "TaskDef content:"
                - cat taskdef.json
          artifacts:
            files:
              - appspec.yml
              - taskdef.json
              
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AppName}-Pipeline
      RoleArn: !ImportValue 'java-full-stack-CodePipelineServiceRoleArn'
      ArtifactStore:
        Type: S3
        Location: !ImportValue 'java-full-stack-ArtifactBucketName'
      Stages:
        - Name: Source
          Actions:
            - Name: ECR-Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: ECR
              Configuration:
                RepositoryName: !Ref AppName
                ImageTag: latest
              OutputArtifacts:
                - Name: ECRImage
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CreateDeploymentArtifacts
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: ECRImage
              OutputArtifacts:
                - Name: DeploymentArtifacts
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !ImportValue 'java-full-stack-CodeDeployAppName'
                DeploymentGroupName: !ImportValue 'java-full-stack-CodeDeployDeploymentGroupName'
              InputArtifacts:
                - Name: DeploymentArtifacts
              RunOrder: 1

Outputs:
  PipelineName:
    Description: 'CodePipeline Name'
    Value: !Ref CodePipeline
  DeploymentTimestamp:
    Description: 'Timestamp of last deployment'
    Value: !Ref DeploymentTimestamp